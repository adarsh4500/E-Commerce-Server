// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addOrder = `-- name: AddOrder :one
INSERT INTO orders (customer_id, total_amount)
VALUES ($1, $2) RETURNING id
`

type AddOrderParams struct {
	CustomerID  uuid.UUID `json:"customer_id"`
	TotalAmount string    `json:"total_amount"`
}

func (q *Queries) AddOrder(ctx context.Context, arg AddOrderParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addOrder, arg.CustomerID, arg.TotalAmount)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const addOrderItem = `-- name: AddOrderItem :one
INSERT INTO order_items (order_id, product_id, quantity, subtotal)
SELECT $1, $2, $3::INTEGER, price * $3::NUMERIC
FROM products 
WHERE products.id = $2
RETURNING subtotal
`

type AddOrderItemParams struct {
	OrderID   uuid.UUID `json:"order_id"`
	ProductID uuid.UUID `json:"product_id"`
	Column3   int32     `json:"column_3"`
}

func (q *Queries) AddOrderItem(ctx context.Context, arg AddOrderItemParams) (string, error) {
	row := q.db.QueryRowContext(ctx, addOrderItem, arg.OrderID, arg.ProductID, arg.Column3)
	var subtotal string
	err := row.Scan(&subtotal)
	return subtotal, err
}

const addProduct = `-- name: AddProduct :one
INSERT INTO products (name, price, description, stock_quantity) 
VALUES ($1, $2, $3, $4) RETURNING id, name, price, description, stock_quantity
`

type AddProductParams struct {
	Name          string `json:"name"`
	Price         string `json:"price"`
	Description   string `json:"description"`
	StockQuantity int32  `json:"stock_quantity"`
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, addProduct,
		arg.Name,
		arg.Price,
		arg.Description,
		arg.StockQuantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.StockQuantity,
	)
	return i, err
}

const addToCart = `-- name: AddToCart :one
INSERT INTO cart (user_id, product_id, quantity)
VALUES ($1, $2, $3) RETURNING id, user_id, product_id, quantity, modified_at
`

type AddToCartParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProductID uuid.UUID `json:"product_id"`
	Quantity  int32     `json:"quantity"`
}

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, addToCart, arg.UserID, arg.ProductID, arg.Quantity)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.ModifiedAt,
	)
	return i, err
}

const addUser = `-- name: AddUser :exec
INSERT INTO users (fullname, email, password, role)
VALUES ($1, $2, $3, $4)
`

type AddUserParams struct {
	Fullname string `json:"fullname"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) error {
	_, err := q.db.ExecContext(ctx, addUser,
		arg.Fullname,
		arg.Email,
		arg.Password,
		arg.Role,
	)
	return err
}

const clearCart = `-- name: ClearCart :exec
DELETE FROM cart
WHERE user_id = $1
`

func (q *Queries) ClearCart(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearCart, userID)
	return err
}

const deleteProductById = `-- name: DeleteProductById :one
DELETE FROM products 
WHERE id=$1 RETURNING id, name, price, description, stock_quantity
`

func (q *Queries) DeleteProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, deleteProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.StockQuantity,
	)
	return i, err
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, price, description, stock_quantity FROM products WHERE id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.StockQuantity,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, price, description, stock_quantity FROM products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Description,
			&i.StockQuantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT fullname, email, password, role, id FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Fullname,
		&i.Email,
		&i.Password,
		&i.Role,
		&i.ID,
	)
	return i, err
}

const removeFromCart = `-- name: RemoveFromCart :one
DELETE FROM cart
WHERE user_id = $1 AND product_id = $2 RETURNING id, user_id, product_id, quantity, modified_at
`

type RemoveFromCartParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProductID uuid.UUID `json:"product_id"`
}

func (q *Queries) RemoveFromCart(ctx context.Context, arg RemoveFromCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, removeFromCart, arg.UserID, arg.ProductID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.ModifiedAt,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status = $1
WHERE id = $2 RETURNING id, customer_id, order_date, total_amount, status
`

type UpdateOrderStatusParams struct {
	Status string    `json:"status"`
	ID     uuid.UUID `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.OrderDate,
		&i.TotalAmount,
		&i.Status,
	)
	return i, err
}

const updateOrderTotal = `-- name: UpdateOrderTotal :one
UPDATE orders SET total_amount = $2
WHERE id = $1 RETURNING id, customer_id, order_date, total_amount, status
`

type UpdateOrderTotalParams struct {
	ID          uuid.UUID `json:"id"`
	TotalAmount string    `json:"total_amount"`
}

func (q *Queries) UpdateOrderTotal(ctx context.Context, arg UpdateOrderTotalParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrderTotal, arg.ID, arg.TotalAmount)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.OrderDate,
		&i.TotalAmount,
		&i.Status,
	)
	return i, err
}

const updateProductById = `-- name: UpdateProductById :one
UPDATE products
SET 
    name = COALESCE($2, name),
    price = COALESCE($3, price),
    description = COALESCE($4, description),
    stock_quantity = COALESCE($5, stock_quantity)
WHERE
    id = $1 RETURNING id, name, price, description, stock_quantity
`

type UpdateProductByIdParams struct {
	ID            uuid.UUID `json:"id"`
	Name          string    `json:"name"`
	Price         string    `json:"price"`
	Description   string    `json:"description"`
	StockQuantity int32     `json:"stock_quantity"`
}

func (q *Queries) UpdateProductById(ctx context.Context, arg UpdateProductByIdParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProductById,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Description,
		arg.StockQuantity,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.StockQuantity,
	)
	return i, err
}

const viewCart = `-- name: ViewCart :many
SELECT id, user_id, product_id, quantity, modified_at FROM cart WHERE user_id = $1
`

func (q *Queries) ViewCart(ctx context.Context, userID uuid.UUID) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, viewCart, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const viewOrderItems = `-- name: ViewOrderItems :many
SELECT id, order_id, product_id, quantity, subtotal
FROM order_items
WHERE order_id = $1
`

func (q *Queries) ViewOrderItems(ctx context.Context, orderID uuid.UUID) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, viewOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.Subtotal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const viewOrders = `-- name: ViewOrders :many
SELECT id, order_date, total_amount, status
FROM orders
WHERE customer_id = $1
`

type ViewOrdersRow struct {
	ID          uuid.UUID `json:"id"`
	OrderDate   time.Time `json:"order_date"`
	TotalAmount string    `json:"total_amount"`
	Status      string    `json:"status"`
}

func (q *Queries) ViewOrders(ctx context.Context, customerID uuid.UUID) ([]ViewOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, viewOrders, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ViewOrdersRow
	for rows.Next() {
		var i ViewOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderDate,
			&i.TotalAmount,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
